# Experiment in documenting the Serrano API using swagger.io
swagger: '2.0'
info:
  title: Serrano Hypermedia API
  description: Harvest REST API used by e.g. Cilantro and built on top of e.g. Avocado
  version: "2.4.5"
# There is no public service, but if there were, it would be defined with `host`.
# Demo host:
# host: harvest.research.chop.edu
# array of all schemes that your API supports
schemes:
  - http
  - https
# For demo purposes, `basePath` will be prefixed to all paths
# TODO: versioning the API and requiring/expecting a version path prefix might be a good idea
# basePath: /demo/api
produces:
  - application/json
paths:
  /:
    get:
      summary: Service information
      description: |
        The root endpoint returns the name and version of the API.
        **TODO**: Swagger has a conventional Info object also including description,
        terms of service, etc, which is a superset of the current payload object.          
      tags:
        - General
      responses:
        '200':
          description: Name and version of the API
          schema:
            $ref: '#/definitions/ServiceInfo'
          headers:
            # TODO: is there a way of isolating this definition
            Link:
              type: string
              format: '<URL>; rel="PURPOSE"[, ...]'
              description: |
                All un-templated endpoints
                Example: <http://127.0.0.1:8000/api/data/export/>; rel="exporter", ...
                TODO: document the rels.
            Link-Template:
              type: string
              format: '<URL>; rel="PURPOSE"[, ...]'
              description: |
                All templated endpoints
                Example: <http://127.0.0.1:8000/api/data/export/{type}/>; rel="export", ...
                TODO: document the rels.
    post:
      summary: Authentication
      description: |
        Posting to the root endpoint produces an authentication token
        in the response. By default, Serrano does not require authentication
        (SERRANO_AUTH_REQUIRED is False), and in many current installations,
        the Serrano API is protected by the encompassing application.
      parameters:
        - name: auth
          in: body
          required: true
          schema:
            $ref: '#/definitions/AuthParams'
      tags:
        - Auth
      responses:
        200:
          description: Auth success response with token
          schema:
            $ref: '#/definitions/ServiceInfoWithToken'
          headers:
            Link:
              type: string
              format: '<URL>; rel="PURPOSE"[, ...]'
              description: |
                All un-templated endpoints
                Example: <http://127.0.0.1:8000/api/data/export/>; rel="exporter", ...
            Link-Template:
              type: string
              format: '<URL>; rel="PURPOSE"[, ...]'
              description: |
                All templated endpoints
                Example: <http://127.0.0.1:8000/api/data/export/{type}/>; rel="export", ...
        default:
          description: Auth failure response
          schema:
            $ref: '#/definitions/AuthError'
  /categories/:
    get:
      summary: Get all published categories
      description: |
        Get a list of categories, including hierarchical relationships between them.
        **Note** that the category information does *not* include the description
        of the category. Archived categories are not returned because published state
        is mutually exclusive with archived state.
      tags:
        - Model
      responses:
        200:
          description: A list of categories
          schema:
            type: array
            items:
              $ref: '#/definitions/Category'
  /categories/{id}/:
    get:
      summary: Get one category
      description: |
        Fetch the definition of a published category by id.
      parameters:
        - name: id
          in: path
          description: Primary key of category
          required: true
          type: integer
      tags:
        - Model
      responses:
        200:
          description: A category
          schema:
            $ref: '#/definitions/Category'
        default:
          description: 404 error with no body
  /concepts/:
    get:
      summary: Get all published concepts
      description: |
        Get a list of concepts, including hierarchical relationships between them.
        **Note** that the concept information does *not* include the description
        of the concept. Archived concepts are not returned because published state
        is mutually exclusive with archived state.
      tags:
        - Model
      responses:
        200:
          description: A list of concepts
          schema:
            type: array
            items:
              $ref: '#/definitions/Concept'
  /concepts/{id}/:
    get:
      summary: Get one concept
      description: |
        Fetch the definition of a published concept by id.
      parameters:
        - name: id
          in: path
          description: Primary key of concept
          required: true
          type: integer
      tags:
        - Model
      responses:
        200:
          description: A concept
          schema:
            $ref: '#/definitions/Concept'
        default:
          description: 404 error with no body
  /fields/:
    get:
      summary: Get all published fields
      description: |
        Get a list of published, non-archived fields.
      tags:
        - Model
      responses:
        200:
          description: A list of fields
          schema:
            type: array
            items:
              $ref: '#/definitions/Field'
  /fields/{id}/:
    get:
      summary: Get one field
      description: |
        Fetch the definition of a published field by id.
      parameters:
        - name: id
          in: path
          description: Primary key of field
          required: true
          type: integer
      tags:
        - Model
      responses:
        200:
          description: A field
          schema:
            $ref: '#/definitions/Field'
        default:
          description: 404 error with no body
  /data/preview/:
    get:
      summary: Fetch results of a query
      description: |
        Fetch results of a specified or default query, limited to a single page of results.
        
        The page size (`limit`) can be 0, in which case all results are returned.
        
        1. If there are `view` and `context` parameters, use those to define the query.
        These parameters can be primary keys or actual JSON objects.
        2. Otherwise, if there is a JSON object `query` parameter, use that to define the query
        by extracting the `context` and `view` from the query (the latter may be primary keys or
        JSON objects).
        3. Otherwise, if there is a non-object `query` parameter, it is taken as the primary key
        of a query object, and if there is an authenticated user, use the query object belonging to the user
        and matching the primary key. Otherwise, if there is not an authenticated user, use the query
        object matching the session key and the primary key. In both of these cases, if the `query`
        parameter is not an integer (and not a JSON object), the primary key condition is swapped
        for one of `session = True`.
        4. Otherwise, construct a default query object, which will return a result
        set consisting of nothing except the primary key of each row in the default root model, e.g. the
        primary key of each patient.

        Note: OpenAPI 2.0 (current version) is not capable of representing this API because it can't
        handle polymorphic entities in general, in particular, the `query`, `view` and `context` parameters
        may be either integers or JSON objects.
      parameters:
        - name: page
          in: query
          description: Which page of results to fetch (1 = first)
          required: false
          type: integer
        - name: limit
          in: query
          description: Page size in rows. If 0, all rows are returned.
          required: false
          type: integer
        - name: stop_page
          in: query
          description: |
            **TODO** Should not be allowed for the preview endpoint. Are
            there other parameters that should be forbidden?
          required: false
          type: integer
      tags:
        - Query
      responses:
        200:
          description: List of results
          schema:
            $ref: '#/definitions/Results'
        default:
          description: 404 error for invalid parameters
definitions:
  ServiceInfo:
    type: object
    properties:
      title:
        type: string
      version:
        type: string
  ServiceInfoWithToken:
    type: object
    properties:
      title:
        type: string
      version:
        type: string
      token:
        type: string
  AuthParams:
    type: object
    properties:
      username:
        type: string
        description: Username
      password:
        type: string
        description: Unencrypted password
  AuthError:
    type: object
    properties:
      message:
        type: string
        description: Error message is 'Invalid credentials'
  Category:
    type: object
    properties:
      id:
        type: integer
        description: Primary key of category object
      name:
        type: string
        description: Name of category
      order:
        type: number
        format: float
        description: Order of category for display
      parent_id:
        type: integer
        description: id of the parent category, or `null` for top-level categories
      _links:
        $ref: '#/definitions/CategoryLinks'
  CategoryLinks:
    type: object
    description: Related links for a category
    properties:
      parent:
        type: string
        format: url
        description: |
          URL of the parent category, if any. Note that if there is no
          parent category, then the `parent` attribute will not exist.
          **TODO**: not sure how to represent this in Swagger.
      self:
        type: string
        format: url
        description: |
          URL of *this* category.
  Concept:
    type: object
    properties:
      category:
        $ref: '#/definitions/Category'
      description:
        type: string
      fields:
        type: array
        items:
          $ref: '#/definitions/FieldSummary'
      formatter:
        type: string
        description: Name of formatter to be applied to the concept
      id:
        type: integer
        description: Primary key of concept
      keywords:
        type: string
        description: |
          Keywords/tags defined for this concept.
          **TODO**: what is the format of this property?
      modified:
        type: string
        description: Date of last modification of concept
        format: date-time
      name:
        type: string
        description: Name of concept
      order:
        type: number
        format: float
        description: Order of concept within its category, or null
      plural_name:
        type: string
        description: Plural name of concept
      published:
        type: boolean
        description: Whether published or not (always true)
      queryable:
        type: boolean
        description: Whether concept should be queryable
      sortable:
        type: boolean
        description: Whether concept should be sortable (if it is viewable)
      viewable:
        type: boolean
        description: Whether concept should be viewable in a result set
  FieldSummary:
    type: object
    properties:
      alt_name:
        type: string
        description: Same as the name, but **TODO** - what is it supposed to be?
      alt_plural_name:
        type: string
        description: Plural name of the field if not canonical (??? **TODO**)
      description:
        type: string
        description: Description of the field
      name:
        type: string
        description: Name of the field
      pk:
        type: integer
        description: Primary key of the field
  Field:
    type: object
    properties:
      app_name:
        type: string
        description: Django app containing the field's model.
      data_modified:
        type: string
        description: |
          **TODO** What is this? Obsolete?
      description:
        type: string
        description: Description of field
      enumerable:
        type: boolean
        description: Whether field is discrete with low cardinality
      field_name:
        type: string
        description: Name of corresponding column in database
      id:
        type: integer
        description: Primary key of field
      internal_type:
        type: string
        description: Type of corresponding column in database
      keywords:
        type: string
        description: |
          **TODO** format? (may be null)
      model_name:
        type: string
        description: Name of Django model containing the field
      modified:
        type: string
        format: date-time
        description: Timestamp of last modification of field definition
      name:
        type: string
        description: Name of field
      nullable:
        type: boolean
        description: Whether field values can be NULL
      operators:
        $ref: '#/definitions/OperatorList'
      order:
        type: number
        format: float
        description: Order of field within its concept
      plural_name:
        type: string
        description: Plural name of field
      plural_unit:
        type: string
        description: Plural form of the unit in which field values are expressed
      published:
        type: boolean
        description: Always true, because only published fields are exposed (**TODO**)
      searchable:
        type: boolean
        description: Whether field is a non-enumerable text field (see enumberable)
      simple_type:
        type: string
        description: Simplified type of field (string, number, boolean, or key)
      unit:
        type: string
        description: Unit in which field values are expressed, if any
      _links:
        $ref: '#/definitions/FieldLinks'
  FieldLinks:
    type: object
    properties:
      distribution:
        type: string
        format: url
        description: Distribution (/dist) endpoint for this field
      self:
        type: string
        format: url
        description: Endpoint for this field
      stats:
        type: string
        format: url
        description: Statistics (/stats) endpoint for this field
      values:
        type: string
        format: url
        description: Values (/values) endpoint for this field
  OperatorList:
    description: List of applicable operators, each a list of (summary, description)
    type: array
    items:
      type: array
      items:
        type: string
  Results:
    type: object
    description: Requested results rows
    properties:
      item_name:
        type: string
        description: Name of root concept (e.g. patient)
      item_name_plural:
        type: string
        description: Plural name of root concept
      items:
        type: array
        description: Array of result rows
        items:
          type: array
          description: Data for one row
          items:
            description: Value for a column (should be string or number; shown as string)
            type: string
      keys:
        type: array
        description: Array of objects describing column (concept) names
        items:
          type: object
          description: |
            Column (concept) name object. **TODO** Can this be anything
            other than a concept? A formatter can inject other columns?
          properties:
            id:
              type: integer
              description: Primary key of concept
            name:
              type: string
              description: Name of column concept
      limit:
        type: integer
        description: Value of the `limit` parameter used in the request
      page:
        type: integer
        description: Value of the `page` parameter used in the request
  Context:
    type: object
    description: |
      DataContext definition or primary key.
      This is a tree object.
      The top-level properties are (operator) `type` and `children`, but `children` may
      contain other nodes ....
      TODO: define this in JSON Schema when OpenAPI 3.0 comes out (represent
      polymorphism and gnarly query logic tree).
    properties:
      type:
        type: string
        description: Operator to be applied at this node of the tree, e.g. 'and'
      children:
        type: string
        description: |
          TODO: This is NOT a string, but a gnarly object.
  View:
    type: object
    description: |
      DataView definition or primary key.
      TODO: define this properly in JSON Schema when OpenAPI 3.0 comes out
    properties:
      ordering:
        description: |
          Order of columns.
          This is supposed to be an array of arrays of (integer, string), where the integer is
          the primary key of a concept, and the string indicates the sort order ("asc" or "desc").
          Because OpenAPI 2.0 doesn't support heterogeneous arrays, 
        type: array
        items:
          type: array
          items:
            type: string
  Query:
    type: object
    description: |
      Stub DataQuery definition. TODO: make this real
    properties:
      something:
        type: string
        